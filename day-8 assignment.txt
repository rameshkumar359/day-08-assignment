day-08 Assignment

Q.1)Class - Movie

The class Movie is stated below. An instance of class Movie represents a film. This class has the following three properties:

    title, which is a String representing the title of the movie
    studio, which is a String representing the studio that made the movie
    rating, which is a String representing the rating of the movie (i.e. PG­13, R, etc)

a) Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

b) The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.

c) Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

d) Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”



Q.1.a)Write a constructor for the class Movie, which takes a String representing the title of the movie, a String representing the studio, and a String representing the rating as its arguments, and sets the respective class properties to these values.

answer:

code:
class movie{
    constructor(title,studio,ratings){
        this.title=title;
        this.studio=studio;
        this.ratings=ratings
    }
    getdata(){
        console.log(`
        title:${this.title}
        studio:${this.studio}
        ratings:${this.ratings}`)
    }
}
var mov=new movie("spiderman","warner bro","PG-13")
mov.getdata()

output:
PS C:\Users\rames\Desktop\HTML\new html> node java.js

        title:spiderman
        studio:warner bro
        ratings:PG-13

Q.1.b)The constructor for the class Movie will set the class property rating to "PG" as default when no rating is provided.
 answer:

code:
class rating{
    constructor(PG){
        this.PG="PG"
    }
}
class movie extends rating{
    constructor(title,studio,ratings){
        super(ratings)
        this.title=title;
        this.studio=studio;
    }
    getdata(){
        console.log(`
        title:${this.title}
        studio:${this.studio}
        ratings:${this.PG}`)
    }
}
var mov=new movie("spiderman","warner bro")
mov.getdata()

output:

PS C:\Users\rames\Desktop\HTML\new html> node java.js

        title:spiderman
        studio:warner bro
        ratings:PG



Q.1.c)Write a method getPG, which takes an array of base type Movie as its argument, and returns a new array of only those movies in the input array with a rating of "PG". You may assume the input array is full of Movie instances. The returned array need not be full.

answer:
code:
var empty=[]
class movie{
    constructor(title,studio,ratings){
        this.title=title;
        this.studio=studio;
        this.ratings=ratings
    }
    getdata(){
        let rat=this.ratings
        if(rat==="PG")
        {
            empty.push(this.title)
        }
    }
}
var mov=new movie("casino royale","eon productions","PG13")
var mov1=new movie("spiderman","warner","PG")
var mov2=new movie("jackyjan","wb bro","PG")
mov.getdata()
mov1.getdata()
mov2.getdata()
console.log(empty)

output:
PS C:\Users\rames\Desktop\HTML\new html> node java.js
[ 'spiderman', 'jackyjan' ]


Q.1.d)Write a piece of code that creates an instance of the class Movie with the title “Casino Royale”, the studio “Eon Productions”, and the rating “PG­13”

answer:
code:
class movie{
    constructor(title,studio,ratings){
        this.title=title;
        this.studio=studio;
        this.ratings=ratings
    }
    getdata(){
        console.log(`
        title:${this.title}
        studio:${this.studio}
        ratings:${this.ratings}`)
    }
}
var mov=new movie("casino royale","eon productions","PG13")
mov.getdata()

output:
PS C:\Users\rames\Desktop\HTML\new html> node java.js

        title:casino royale
        studio:eon productions
        ratings:PG13

Q.2)

code:
class circle{
    setAttr(radius,color){
        this.radius=radius
        this.color=color
    }
    getAttr(){
        let radius=this.radius
        let color=this.color
        let area=(3.14*radius*radius)
        let circumferance=(2*3.14*radius)
        console.log(`Circle[radius=${radius},color=${this.color}]`)
        console.log(area)
        console.log(circumferance)
    }
}
var cir=new circle()
cir.setAttr(22,"red")
cir.getAttr()

output:
S C:\Users\rames\Desktop\HTML\new html> node java.js
Circle[radius=22,color=red]
1519.76
138.16


Q.3)Write a “person” class to hold all the details.


code:

class person{
       static college="KSRCE"
    constructor(name,department,age){
        this.name=name
        this.department=department
        this.age=age
    }
    getdata()
    {
        console.log(`
        name:${this.name}
        department:${this.department}
        age:${this.age}`)

    }
    static getcollege(){
        console.log(`
        college:${person.college}`)
    }
}
var stud1=new person("rajesh","mechanical","25")
stud1.getdata()
person.getcollege()

output:
PS C:\Users\rames\Desktop\HTML\new html> node java.js

        name:rajesh
        department:mechanical
        age:25

        college:KSRCE

Q.4)write a class to calculate uber price.
  code:

class uber{
    constructor(vechiletype,distance)
    {
        this.vechiletype=vechiletype
        this.distance=distance
    }
    getdata(){
        let vechile=this.vechiletype
        let distance=this.distance
        if(vechile=="auto")
        {
            let fair=8*distance
            let driverfair=1*distance
            let gst=parseFloat((fair+driverfair)*5/100)
            let totalfair=fair+driverfair+gst
            
            console.log(`
            vechile type:${vechile}
            distance:${distance} KM
            fair:${fair} RS
            driverfair:${driverfair} RS
            gst tax:${gst} RS
            total fair:${totalfair} RS`)   
        }
        if(vechile=="car")
        {
            let fair=12*distance
            let driverfair=1*distance
            let gst=parseFloat((fair+driverfair)*5/100)
            let totalfair=fair+driverfair+gst
            
            console.log(`
            vechile type:${vechile}
            distance:${distance} KM
            fair:${fair} RS
            driverfair:${driverfair} RS
            gst tax:${gst} RS
            total fair:${totalfair} RS`)   
        }
    }
}
var auto=new uber("auto",25)
var car=new uber("car",25)
auto.getdata()
car.getdata()


output:
PS C:\Users\rames\Desktop\HTML\new html> node java.js

            vechile type:auto
            distance:25 KM
            fair:200 RS
            driverfair:25 RS
            gst tax:11.25 RS
            total fair:236.25 RS

            vechile type:car
            distance:25 KM
            fair:300 RS
            driverfair:25 RS
            gst tax:16.25 RS
            total fair:341.25 RS


















